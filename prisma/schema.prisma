generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String   @default("seller") // Can be "admin" or "seller"
  createdAt DateTime @default(now())
}

enum BannerType {
  GENERAL
  DISCOUNT
  HOMEPAGE
  FOURINONE
}

enum BannerStatus {
  ACTIVE
  INACTIVE
}

model Banner {
  id        Int          @id @default(autoincrement())
  imageUrl  String
  link      String
  position  Int
  type      BannerType
  status    BannerStatus
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}
enum ProductStatus {
  ACTIVE
  DRAFT
}
model Product {
  id            Int          @id @default(autoincrement())
  title         String
  status        ProductStatus @default(DRAFT)
  bodyHtml      String
  vendor        String
  productType   String
  categoryId    Int?
  category      Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  subCategoryId Int?         // Nullable subcategory reference
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull)
  variants      Variant[]
  images        Image[]
  tags          String       @default("[]")
  isFeatured    Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Variant {
  id            Int         @id @default(autoincrement())
  productId     Int
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  title         String
  price         Float
  discount      Boolean     @default(false)
  discountPrice Float?
  sku           String      @unique
  cost          Float?      // Added nullable cost field
  quantity      Int?        // Added nullable quantity field
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Image {
  id            Int          @id @default(autoincrement())
  productId     Int?
  product       Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)
  src           String
  categoryId    Int?
  category      Category?    @relation(fields: [categoryId], references: [id])
  subCategoryId Int?         // Foreign key for SubCategory
  subCategory   SubCategory? @relation("SubCategoryImages", fields: [subCategoryId], references: [id], onDelete: Cascade) // Matches SubCategory's images relation
  @@index([productId, categoryId, subCategoryId])
}
model Category {
  id           Int          @id @default(autoincrement())
  title        String
  link         String?     
  products     Product[]
  images       Image[]
  subCategories SubCategory[] // Added relation to SubCategory
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

// New SubCategory model
model SubCategory {
  id         Int       @id @default(autoincrement())
  title      String
  categoryId Int
  images     Image[]   @relation("SubCategoryImages") // Explicit relation name
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@index([categoryId])
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   
  phone     String?  
  orders    Order[]
  cart      Cart?    @relation(name: "CustomerCart")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shipping {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  order     Order    @relation(name: "OrderShipping", fields: [orderId], references: [id], onDelete: Cascade)
  carrier   String?
  service   String?
  weight    Float?
  length    Float?
  width     Float?
  height    Float?
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int?       
  customer   Customer?   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items      OrderItem[]
  payments   Payment[]
  subtotal   Float?
  tax        Float?
  total      Float?
  shipping   Shipping?   @relation(name: "OrderShipping")
  status     String      @default("pending") // e.g., pending, completed, failed
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
}

model Cart {
  id         Int        @id @default(autoincrement())
  sessionId  String?    @unique // For guest carts
  customerId Int?       @unique // For registered users
  customer   Customer?  @relation(name: "CustomerCart", fields: [customerId], references: [id], onDelete: SetNull)
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity  Int
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  method    String   @default("COD")
  status    String   @default("pending")
  amount    Float
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  CREDIT_CARD
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
